/**
 * Some options can be overridden by CLI arguments:
 *  - --url=http://example.org
 */
const {series, parallel} = require('gulp');
const yargs = require('yargs');
const {hideBin} = require('yargs/helpers');
const path = require('path');
const {globSync} = require('glob');

process.on('unhandledRejection', reason => {
	throw reason;
});
process.on('uncaughtException', error => {
	console.error(error);
	process.exit(1);
});

process.chdir(path.dirname(__dirname));

const argv = yargs(hideBin(process.argv)).parse();

const paths = {
	src: `src`,
	dist: `dist`,
	var: `var`,
};

// must be published for PHP font preload auto configuration
const fontsDataFile = path.resolve(`${paths.dist}/fonts.json`);
const statsDataFile = path.resolve(`${paths.var}/stats.json`);

const cachebust = require('../../lib/cachebust')(paths);

const browsersync = require('../../tasks/browsersync-serve')(paths, argv['host']);
const clean = require('../../tasks/clean')(paths);
const img = require('../../tasks/img')(paths);
const criticalLocal = require('../../tasks/critical-local')(paths);
const criticalRemote = require('../../tasks/critical-remote')(paths);
const svg = require('../../tasks/svg')(paths, cachebust);
const html = require('../../tasks/html')(paths, cachebust);
const font = require('../../tasks/dynfont')({paths});

const copy = require('../../tasks/copy')(paths, [
	`${paths.src}/*.html`,
]);

const js = require('../../tasks/js')({
	paths,
	globs: [
		...globSync(`${paths.src}/js/inline/*.js`),
		`${paths.src}/js/main.js`,
		{import: `${paths.src}/js/form.js`, dependOn: 'js/main.js'},
	],
});

const scss = require('../../tasks/scss')({
	paths,
	cachebust,
	fontsDataFile,
	fonts: {
		'droid': ['Georgia', 'Times New Roman', 'Noto Serif'],
		'bitter': 'serif',
	},
});

const stat = require('../../tasks/stats')({
	paths,
	fontsDataFile,
	statsDataFile,
});

const tasks = [
	parallel(img.main, copy.main),
	parallel(svg.main, svg.scss),
	scss.main,
	js.main, // fonts.js depends on fonts.json generated by scss
];

if (process.env.NODE_ENV === 'production') {
	tasks.push(series(
		stats,
		font.main,
		scss.main,
		html.main,
	));
} else {
	tasks.push(font.main);
}

const main = series(...tasks);
main.displayName = 'default';

const watch = parallel(copy.watch, svg.watch, js.watch, scss.watch, font.watch);
watch.displayName = 'default:watch';

module.exports = [
	browsersync,
	clean,
	criticalLocal,
	criticalRemote,
	copy.main,
	copy.watch,
	font.main,
	font.watch,
	html.main,
	html.watch,
	img.main,
	img.watch,
	js.main,
	js.watch,
	jsil.main,
	jsil.watch,
	scss.main,
	scss.watch,
	svg.main,
	svg.watch,
	svg.scss,
	main,
	watch,
];
